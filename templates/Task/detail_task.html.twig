{% extends 'base.html.twig' %}
{% block title %}Detalle de la Tarea{% endblock %}
{% set acumuladoHoy = (task.updatedAt|date('d/m/Y') == "now"|date('d/m/Y')) ? task.elapsedTimeToday : 0 %}


{% block body %}
    <div class="header-container">
        <div><a href="{{ path('tasks_index') }}"><i class="fa-solid fa-angle-left"></i></a></div>
        <h1>Detalle de la Tarea</h1>
    </div>
    <div class="detail-container">
        <div class="chronometer-container">
            <div class="time" id="time">
                <span>{{ task.elapsedTimeFormatted }}</span>
            </div>
            <div class="buttons-contianer">
                <div class="btn btn-start" onclick="iniciar()"><i class="fa-duotone fa-solid fa-play"></i></div>
                <div class="btn btn-pause" onclick="pausar()"><i class="fa-solid fa-stop"></i></div>
            </div>
        </div>
        <div class="task-detail">
            <p><span class="label">TÃ­tulo:</span> {{ task.title }}</p>
            <p><span class="label">Creado:</span> {{ task.createdAt|date('d/m/Y') }}</p>
            <p><span class="label">Tiempo trabajado hoy:</span> <span id="accumulatedTimeToday">{{ task.elapsedTimeTodayFormatted }}</span></p>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    <script>
        let cronometrar = false;
        let tiempoRef =  Date.now();
        let acumulado = {% if task.elapsedTime %} {{ task.elapsedTime }} * 1000 {% else %} 0 {% endif %};
        let acumuladoHoy = {{ acumuladoHoy }} * 1000;

        setInterval( () => {
            const tiempo = document.getElementById('time');
            const tiempoAcumuladoHoy = document.getElementById('accumulatedTimeToday')
            if (cronometrar) {
                acumulado += Date.now() - tiempoRef;
                acumuladoHoy += Date.now() - tiempoRef;
            }
            tiempoRef = Date.now();
            tiempo.innerHTML = formatearS(acumulado/1000);
            tiempoAcumuladoHoy.innerHTML = formatearS(acumuladoHoy/1000);
        }, 1000)

        function formatearS (S) {
            let H = Math.floor(S / 3600);
            let M = Math.floor((S % 3600) / 60);
            let S_restante = Math.floor(S % 60);

            let H_formateado = String(H).padStart(2, '0');
            let M_formateado = String(M).padStart(2, '0');
            let S_formateado = String(S_restante).padStart(2, '0');

            return `${H_formateado}:${M_formateado}:${S_formateado}`;
        }

        function pausar() {
            cronometrar = false;
            enviarTiempoAcumulado();
        }

        function iniciar() {
            cronometrar = true;
        }

        function enviarTiempoAcumulado() {
            $.ajax({
                url: '{{ path('update_task', {'id': task.id}) }}',
                type: 'POST',
                data: {
                    accumulatedSeconds: (acumulado/1000),
                    accumulatedSecondsToday: (acumuladoHoy/1000)
                },
                success: function (data) {
                    if (data.status === 'success') {
                        console.log('Tarea actualizada correctamente');
                    } else {
                        console.error('Error al actualizar la tarea');
                    }
                },
                error: function (error) {
                    console.error('Error en la solicitud AJAX:', error);
                }
            });
        }
    </script>
{% endblock %}

{% block stylesheets %}
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 20px;
            color: #333;
        }
        .header-container {
            display: flex;
            align-items: center;
            justify-content: space-between;
            max-width: 80%;
            margin: auto;
        }

        .header-container i{
            color: #3497d9;
            font-size: 50px;
        }
        h1 {
            color: #3497d9;
            text-align: center;
            font-size: 70px;
            width: 100%;
        }
        .detail-container {
            background-color: #f8f8f8;
            padding: 30px;
            border-radius: 20px;
            max-width: 80%;
            margin: 0 auto;
            display: flex;
            gap: 40px;
            flex-direction: column;
            align-items: center;
        }
        .task-detail {
            margin-left: 30px;
        }
        .task-detail p {
            margin: 10px 0;
            font-size: 33px;
        }
        .label {
            font-weight: bold;
            color: #555;
        }
        .chronometer-container {
            border-radius: 20px;
            background-color: #ececec;
            padding: 10px;
            width: 90%;
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        .buttons-contianer {
            display: flex;
            width: 75%;
            justify-content: space-around;
        }
        .btn{
            cursor: pointer;
            font-size: 100px;
        }

        .time {
            font-size: 150px;
            color: #555555;
        }
        #accumulatedTimeToday {
            color: #555555;
        }
    </style>
{% endblock %}